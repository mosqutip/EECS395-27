[kernel] preprocessing with "gcc -C -E -I.  zimp.c"
/usr/include/bits/byteswap.h:47:[kernel] warning: Calling undeclared function __builtin_bswap32. Old style K&R code?
/usr/include/bits/byteswap.h:111:[kernel] warning: Calling undeclared function __builtin_bswap64. Old style K&R code?
zimp.c:78:[kernel] warning: Calling undeclared function dvmThrowException. Old style K&R code?
zimp.c:85:[kernel] warning: Calling undeclared function LOGE. Old style K&R code?
zimp.c:86:[kernel] warning: Calling undeclared function dvmAbort. Old style K&R code?
zimp.c:84:[kernel] warning: Calling undeclared function dvmGcPreZygoteFork. Old style K&R code?
zimp.c:89:[kernel] warning: Calling undeclared function setSignalHandler. Old style K&R code?
zimp.c:91:[kernel] warning: Calling undeclared function dvmDumpLoaderStats. Old style K&R code?
zimp.c:92:[kernel] warning: Calling undeclared function fork. Old style K&R code?
zimp.c:113:[kernel] warning: Calling undeclared function setgroupsIntarray. Old style K&R code?
zimp.c:116:[kernel] warning: Calling undeclared function LOGW. Old style K&R code?
zimp.c:119:[kernel] warning: Calling undeclared function setrlimitsFromArray. Old style K&R code?
zimp.c:125:[kernel] warning: Calling undeclared function setgid. Old style K&R code?
zimp.c:131:[kernel] warning: Calling undeclared function setuid. Old style K&R code?
zimp.c:140:[kernel] warning: Calling undeclared function dvmThreadSelf. Old style K&R code?
zimp.c:141:[kernel] warning: Calling undeclared function dvmGetSysThreadId. Old style K&R code?
zimp.c:144:[kernel] warning: Calling undeclared function enableDebugFeatures. Old style K&R code?
zimp.c:146:[kernel] warning: Calling undeclared function unsetSignalHandler. Old style K&R code?
zimp.c:148:[kernel] warning: Calling undeclared function dvmInitAfterZygote. Old style K&R code?
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value] Values of globals at initialization
        gDvm âˆˆ {0}
zimp.c:161:[value] assigning non deterministic value for the first time
[value] computing for function forkAndSpecializeCommon <- main.
        Called from zimp.c:163.
zimp.c:71:[kernel] warning: out of bounds read. assert \valid_read(args+0);
zimp.c:71:[kernel] warning: extracting bits of a pointer
zimp.c:71:[value] Reading left-value *(args + 0).
        The location is {{ S_argv -> {0} }}.
        It contains a garbled mix of {S_0_S_argv} because of Misaligned {zimp.c:71}.
zimp.c:71:[value] Assigning imprecise value to uid.
        The imprecision originates from Misaligned {zimp.c:71}
zimp.c:72:[kernel] warning: extracting bits of a pointer
zimp.c:72:[value] Reading left-value *(args + 1).
        The location is {{ S_argv -> {16} }}.
        It contains a garbled mix of {S_0_S_argv} because of Misaligned {zimp.c:72}.
zimp.c:72:[value] Assigning imprecise value to gid.
        The imprecision originates from Misaligned {zimp.c:72}
zimp.c:73:[kernel] warning: out of bounds read. assert \valid_read(args+2);
zimp.c:73:[kernel] warning: extracting bits of a pointer
zimp.c:73:[value] Reading left-value *(args + 2).
        The location is {{ S_argv -> {32} }}.
        It contains a garbled mix of {S_1_S_argv} because of Misaligned {zimp.c:73}.
zimp.c:73:[value] Assigning imprecise value to gids.
        The imprecision originates from Misaligned {zimp.c:73}
zimp.c:74:[kernel] warning: out of bounds read. assert \valid_read(args+3);
zimp.c:75:[kernel] warning: out of bounds read. assert \valid_read(args+4);
[value] Recording results for forkAndSpecializeCommon
[value] Done for function forkAndSpecializeCommon
[value] Recording results for main
[value] done for function main
[pdg] computing for function forkAndSpecializeCommon
zimp.c:156:[pdg] warning: no final state. Probably unreachable...
[pdg] done for function forkAndSpecializeCommon
[pdg] dot file generated in graph.forkAndSpecializeCommon.dot
[pdg] computing for function main
[from] Computing for function forkAndSpecializeCommon
[from] Non-terminating function forkAndSpecializeCommon (no dependencies)
[from] Done for function forkAndSpecializeCommon
zimp.c:164:[pdg] warning: no final state. Probably unreachable...
[pdg] done for function main
[pdg] dot file generated in graph.main.dot
[pdg] ====== PDG GRAPH COMPUTED ======
[pdg] RESULT for forkAndSpecializeCommon:
      [Elem] 1 : InCtrl
      [Elem] 2 : VarDecl : args
        -[a--]-> 3
      [Elem] 3 : In1
        -[a--]-> 2
      [Elem] 4 : VarDecl : pid
      [Elem] 5 : VarDecl : uid
      [Elem] 6 : VarDecl : gid
      [Elem] 7 : VarDecl : gids
      [Elem] 8 : VarDecl : debugFlags
      [Elem] 9 : VarDecl : rlimits
      [Elem] 10 : VarDecl : tmp
      [Elem] 11 : VarDecl : err
      [Elem] 12 : VarDecl : tmp_0
      [Elem] 13 : VarDecl : tmp_1
      [Elem] 14 : VarDecl : tmp_2
      [Elem] 15 : VarDecl : tmp_3
      [Elem] 16 : VarDecl : tmp_4
      [Elem] 17 : VarDecl : tmp_5
      [Elem] 18 : VarDecl : tmp_6
      [Elem] 19 : VarDecl : tmp_7
      [Elem] 20 : VarDecl : thread
      [Elem] 21 : VarDecl : tmp_8
      [Elem] 22 : VarDecl : tmp_9
      [Elem] 23 : VarDecl : __retres
      [Elem] 24 : uid = (unsigned int)*(args + 0);
        -[-c-]-> 1
        -[--d]-> 2
        -[--d]-> 3
        -[a--]-> 5
        -[--d]-> 49
      [Elem] 25 : gid = (unsigned int)*(args + 1);
        -[-c-]-> 1
        -[--d]-> 2
        -[--d]-> 3
        -[a--]-> 6
        -[--d]-> 48
      [Elem] 26 : gids = (ArrayObject *)*(args + 2);
        -[-c-]-> 1
        -[--d]-> 2
        -[--d]-> 3
        -[a--]-> 7
        -[--d]-> 47
      [Elem] 27 : debugFlags = *(args + 3);
        -[-c-]-> 1
        -[--d]-> 2
        -[--d]-> 3
        -[a--]-> 8
        -[--d]-> 46
      [Elem] 28 : rlimits = (ArrayObject *)*(args + 4);
        -[-c-]-> 1
        -[--d]-> 2
        -[--d]-> 3
        -[a--]-> 9
      [Elem] 29 : ! gDvm.zygote
        -[-c-]-> 1
      [Elem] 30 : tmp
        -[-c-]-> 1
        -[--d]-> 10
      [Elem] 31 : goto return_label;
        -[-c-]-> 1
        -[-c-]-> 32
      [Elem] 32 : return_label: /* internal */
        -[-c-]-> 1
      [Elem] 33 : pid == 0
        -[-c-]-> 1
        -[--d]-> 4
      [Elem] 34 : pid > 0
        -[-c-]-> 1
        -[--d]-> 4
      [Elem] 35 : err < 0
        -[-c-]-> 1
        -[--d]-> 11
      [Elem] 36 : block
        -[-c-]-> 1
      [Elem] 37 : err < 0
        -[-c-]-> 1
        -[--d]-> 11
      [Elem] 38 : block
        -[-c-]-> 1
      [Elem] 39 : err < 0
        -[-c-]-> 1
        -[--d]-> 11
      [Elem] 40 : block
        -[-c-]-> 1
      [Elem] 41 : err < 0
        -[-c-]-> 1
        -[--d]-> 11
      [Elem] 42 : block
        -[-c-]-> 1
      [Elem] 43 : tmp_9
        -[-c-]-> 1
        -[--d]-> 22
      [Elem] 44 : return_label: /* internal */ return __retres;
        -[-c-]-> 1
        -[--d]-> 23
      [Elem] 45 : OutRet
      [Elem] 46 : In(S_argv[1][bits 16 to 31])
      [Elem] 47 : In(S_argv[1][bits 0 to 15])
      [Elem] 48 : In(S_argv[0][bits 16 to 31])
      [Elem] 49 : In(S_argv[0][bits 0 to 15])
[pdg] RESULT for main:
      [Elem] 50 : InCtrl
      [Elem] 51 : VarDecl : argc
        -[a--]-> 52
      [Elem] 52 : In1
        -[a--]-> 51
      [Elem] 53 : VarDecl : argv
        -[a--]-> 54
      [Elem] 54 : In2
        -[a--]-> 53
      [Elem] 55 : VarDecl : a
      [Elem] 56 : VarDecl : p
      [Elem] 57 : VarDecl : __retres
      [Elem] 58 : a = (u4 const *)argv;
        -[-c-]-> 50
        -[--d]-> 53
        -[--d]-> 54
        -[a--]-> 55
      [Elem] 59 : Call89-InCtrl : p = forkAndSpecializeCommon(a);
        -[-c-]-> 50
      [Elem] 60 : Call89-In1 : p = forkAndSpecializeCommon(a);
        -[-c-]-> 50
        -[--d]-> 55
        -[--d]-> 58
        -[-c-]-> 59
      [Elem] 61 : return __retres;
        -[-c-]-> 50
        -[--d]-> 57
      [Elem] 62 : OutRet
